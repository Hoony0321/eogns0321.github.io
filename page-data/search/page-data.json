{"componentChunkName":"component---src-pages-search-jsx","path":"/search/","result":{"data":{"allMarkdownRemark":{"nodes":[{"excerpt":"üèÜ¬†GOAL Gain a clear understanding of what PostgreSQL is. Explain how PostgreSQL differs from other RDBMS. Able to use PostgreSQL's key features. (custom data type, JSON type, etc...) Able to determin‚Ä¶","fields":{"slug":"/postgreSQL/"},"frontmatter":{"date":"December 30, 2024","title":"‚ùìPostgreSQL: Why Do Developers Choose It?","tags":["PostgreSql"]},"rawMarkdownBody":"\n<br>\n<br>\n\n## üèÜ¬†GOAL\n\n1. Gain a clear understanding of what PostgreSQL is.\n2. Explain how PostgreSQL differs from other RDBMS.\n3. Able to use PostgreSQL's key features. (custom data type, JSON type, etc...)\n4. Able to determine which projects are suitable for PostgreSQL.\n\n<br>\n\n## üëãüèª¬†PostgreSQLÏù¥ÎûÄ?\n\nPostgreSQL is an open-source **Object-Relational Database Management System** that evolved from the Postgres project, which began at UC Berkeley in 1986.\n\nCurrently, it is characterized by scalability, stability, and standards compliance, making it one of the most trusted databases worldwide.\n\n<br>\n\n## ü§î **Why Do People Choose PostgreSQL?**\n\n- **Open Source** : Free to use with no license restrictions.\n- **Powerful Data Intigrity** : Provides stability and reliability through ACID cmpliance.\n- **Various Features** : Supports diverse data types and advanced query functions including JSON, XML, Arrays.\n- **Extensibility** : Easy to extend functionality through custom data type and extension modules.\n- **Multi-platform Support** : Able to run on various operating systems including Windows,\n  macOs and Linux\n\n<br>\n\n## üî•¬†**Key Differentiators of PostgreSQL from Other RDBMS**\n\nPostgreSQL goes beyond the role of simple data store, offering features that are hard to find in other RDBMS:\n\n1. **Custom Data Types**: Able to create custome data types according to their needs.\n2. **JSON and JSONB Data Types**: Combines the advantages of relational and non-relational databases.\n3. **HStore**: Able to store Key-Value data.\n4. **Dimensional Data Types**: Supports demensional data types\n5. **Extensible Architecture**: Users can extend PostgreSQL's core functionality through extension module like PostGIS, which is useful for handling geographic data.\n\n<br>\n\n## üíª **Experiencing PostgreSQL's Unique Features**\n\n### 1. Using Various Data Types Not Found in Other RDBMS\n\nScenario: IoT (Internet of Things) Device Management Platform\n\n**Special Data Types Used**\n\n- UUID: Unique Device Identification\n- JSONB: Flexible Device Configuration and Sensor Data\n- INET: Network Information and IP Tracking\n- Custom Composite Type: Location Information (Latitude, Longitude, Altitude)\n- Enum: Device Status Management\n- MONEY: Maintenance Cost Tracking\n- Range Type: Device Age Tracking\n- Timestamp with Time Zone\n\n<br>\n\n**Creating Custom Data Type 1 (Enumerated Type)**\n\n```sql\nCREATE TYPE DEVICE_CONNECTIVITY_STATUS AS ENUM(\n\t'online',\n\t'offline',\n\t'maintenance',\n\t'error',\n\t'decommissioned'\n);\n```\n\n![alt text](<Ïä§ÌÅ¨Î¶∞ÏÉ∑ 2024-12-11 Ïò§ÌõÑ 4.51.07.png>)\n\n<br>\n\n**Creating Custom Data Type 2 (_Composite Type)_**\n\n```sql\nCREATE TYPE geo_location AS (\n    latitude NUMERIC(10,7),\n    longitude NUMERIC(10,7),\n    altitude NUMERIC(7,2)\n);\n```\n\n![alt text](<Ïä§ÌÅ¨Î¶∞ÏÉ∑ 2024-12-11 Ïò§ÌõÑ 4.55.31.png>)\n\n<br>\n\n**Creating a Table Using Various Data Types (UUID / JSONB / INET / MONEY / DATE / RANGE / CUSTOM)**\n\n```sql\nCREATE TABLE iot_devices (\n    -- UUID for unique device identification\n    device_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n\n    -- Device Metadata using JSONB\n    device_details JSONB NOT NULL,\n\n    -- Network Information using INET\n    network_info INET,\n\n    -- Device Location using Custom Composite Type\n    current_location geo_location,\n\n    -- Device Status using Custom Enum\n    current_status device_connectivity_status,\n\n    -- Maintenance Costs using MONEY\n    maintenance_cost MONEY,\n\n    -- Last Maintenance Date\n    last_maintenance_date DATE,\n\n    -- Custom Range Type for Device Age Tracking\n    device_age INT4RANGE\n);\n```\n\n![alt text](<Ïä§ÌÅ¨Î¶∞ÏÉ∑ 2024-12-11 Ïò§ÌõÑ 4.58.05.png>)\n\n<br>\n\n**Query Data**\n\n```sql\nSELECT\n    device_id,\n    -- Extracting from JSONB\n    device_details->>'manufacturer' AS manufacturer,\n    device_details->'hardware_specs'->>'cpu' AS cpu_type,\n\n    -- Using Enum\n    current_status,\n\n    -- Network Information\n    host(network_info) AS ip_address,\n\n    -- Location Details\n    (current_location).latitude AS device_latitude,\n    (current_location).longitude AS device_longitude,\n\n    -- Maintenance Cost\n    maintenance_cost,\n\n    -- Device Age Range\n    lower(device_age) AS min_age,\n    upper(device_age) AS max_age\nFROM iot_devic\n```\n\n![alt text](<Ïä§ÌÅ¨Î¶∞ÏÉ∑ 2024-12-11 Ïò§ÌõÑ 5.07.25.png>)\n\n<br>\n\nUsing PostgreSQL allows for modeling complex real-world entities more accurately in databases through its support for various data types and custom data types.\n\nHowever, this flexibility can potentially violate normalization principles.\n\nParticularly with JSONB, data duplication can occur. Additionally, the flexibility in data type assignments poses risks to data consistency and integrity. Complex composite types can be difficult to index and may lead to performance degradation in large-scale databases.\n\n### **2. Exploring PostgreSQL Extensions (PostGIS)**\n\nOne of **PostgreSQL's** greatest strengths is its ability to extend core functionality through various **extension modules**. Among these, **PostGIS** stands out as a powerful tool for processing and analyzing spatial data, making it essential for map and location-based application development. Let's explore PostGIS use cases and experience PostgreSQL's extension capabilities by using its core features.\n\n### **PostGIS Use Cases**\n\nPostGIS is widely used in the following areas:\n\n- **Maps and Navigation Systems**: Location-based services (LBS) for route calculations, distance measurements, etc.\n- **Smart Cities**: Spatial data analysis for urban planning and infrastructure management.\n- **Environmental Analysis**: Spatial analysis for land use and ecosystem conservation.\n- **Business Analytics**: Store location selection, customer distribution analysis, etc.\n\n<br>\n\n### **PostGIS Practice: Working with Simple Spatial Data**\n\n**1. Activating PostGIS**\n\nFirst, we need to activate PostGIS in the PostgreSQL database. Let's create a new database and add the extension.\n\n```sql\n\nCREATE DATABASE spatialdb;\n\\c spatialdb\nCREATE EXTENSION postgis;\n\n```\n\n**2. Storing Point Data**\n\nLet's store and query city locations.\n\n```sql\n\nCREATE TABLE cities (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(100),\n    location GEOMETRY(Point, 4326)\n);\n\nINSERT INTO cities (name, location)\nVALUES\n('Vancouver', ST_SetSRID(ST_MakePoint(-123.1216, 49.2827), 4326)),\n('Seattle', ST_SetSRID(ST_MakePoint(-122.3321, 47.6062), 4326))\n```\n\n![alt text](<Ïä§ÌÅ¨Î¶∞ÏÉ∑ 2024-12-12 Ïò§ÌõÑ 4.36.45.png>)\n\n<br>\n\n**3. Distance Calculation**\n\nCalculate the distance between two cities.\n\n```sql\nSELECT\n    a.name AS city1,\n    b.name AS city2,\n    ST_Distance(a.location::geography, b.location::geography) AS distance_meters\nFROM cities a, cities b\nWHERE a.name = 'Vancouver' AND b.name = 'Seattle';\n\n```\n\n`ST_Distance` is a function provided by PostGIS that calculates the **shortest distance** between two spatial objects.\n\n![alt text](<Ïä§ÌÅ¨Î¶∞ÏÉ∑ 2024-12-12 Ïò§ÌõÑ 4.37.35.png>)\n\n<br>\n\n**4. Visualization**\n\nYou can visually verify the above results using pgAdmin or GIS tools (QGIS). Through pgAdmin's \"View Data\" option, you can directly view spatial data on a map.\n\n![alt text](<Ïä§ÌÅ¨Î¶∞ÏÉ∑ 2024-12-12 Ïò§ÌõÑ 4.41.33.png>)\n\n<br>\n\n## ‚ö†Ô∏è **Disadvantages of PostgreSQL**\n\nWhile PostgreSQL offers powerful features, it also has several drawbacks:\n\n1. **Steep Learning Curve**\n   - Requires significant learning time to utilize extension modules and advanced features effectively.\n2. **Potential Data Integrity Issues**\n   - Using JSONB and custom types can lead to reduced data consistency and integrity.\n3. **Horizontal Scaling (Sharding) Limitations**\n   - PostgreSQL is fundamentally designed for single-node operations, requiring additional tools (like Citus) for distributed processing.\n   - ~~As I haven't personally experienced this aspect, I plan to practice it later and add more content about it.~~\n\n<br>\n\n### ‚≠ê **Conclusion**\n\nPostgreSQL's major advantage lies in its support for diverse and flexible data types (MONEY, RANGE, INET, JSONB, CUSTOM TYPE), allowing natural representation of complex real-world entities in the database. Additionally, PostgreSQL provides powerful extension modules like PostGIS, enabling advanced functionality beyond basic database features.\n\nHowever, PostgreSQL has clear limitations including a significant learning curve, schema-less data model challenges, and lack of built-in distributed processing capabilities. Therefore, before choosing PostgreSQL, consider the following questions:\n\n- Do you need complex data types, JSON support, and custom data types?\n- Are you planning to utilize advanced spatial data processing (like PostGIS)?\n- Is your environment capable of vertical scaling for large-scale data processing?\n\nIf you can answer these questions positively, PostgreSQL would be an excellent choice. Experience PostgreSQL's powerful features in your project! üöÄ\n"},{"excerpt":"Why Did I start new blog? I decided to start this new blog to record what I study and learn everyday. Whenever I learn something new, I tend to forget it quickly unless I write it down. That's why I'‚Ä¶","fields":{"slug":"/starting-new-blog/"},"frontmatter":{"date":"December 04, 2024","title":"üî• Starting New Blog!","tags":["Personal"]},"rawMarkdownBody":"\n![Profile Image Caption](profile-image.png)\n\n<br>\n<br>\n\n## Why Did I start new blog?\n\nI decided to start this new blog to record what I study and learn everyday.  \nWhenever I learn something new, I tend to forget it quickly unless I write it down.\n\nThat's why I'm starting this blog! Through this blog, I plan to share what I study, things I discover, and even algorithm logic I work on. Especially, I'll write all my posts in English! This way, I can improve my English writing skills.\n\nActually I've done something similar before using a platform called ` velog`.  \nHowever, one day I saw many developers running their own customized blogs, and I was really impressed. As a developer, I feel like having a personal website that I can customize to my taste.\n\nSo, I decided to create my own blog using `Github Page`  \nFrom now on, I'll use this blog to consistently record what I learn every day!\n\n<br>\n\n## What is Github Page?\n\nGithub Page is a free static web hosting service. It creates static websites based on `Github Repository Files` and then hosts them online.\n\nEspecially, if you activate `Pages Option` in your Github Repository settings, you don't have to worry about deploying the website. It's really easy to deploy your own website. The only thing you need to care about is choosing a good template and making your website beautiful.\n\nFurthermore, you can add a `comments system` to your website by using 3rd-party libraries like `giscus`. This library implements a `comments system` using your Github repository's `discussions` feature, which I found really fascinating.\n\nI hope to write a more detailed post about this in the future!\n\n<br>\n\n## So, Which Template Did I Choose?\n\nI spent quite some time searching through various templates to create a beautiful blog. But It was hard to find a template that I really liked\nThen, I found [gatsby-starter-hoodie](https://github.com/devHudi/gatsby-starter-hoodie), and it was exactly what I was looking for!\n\nThe template has a clean and minimal design with useful features like series and tags, which is exactly what I wanted. The template was created by the `hoodie` developer. I really appreciate him for making the template so easy to use.\n\nIt seems to be based on Gatsby, but I haven't looked into it in detail yet. I plan to study and write posts about this part as well.\n\n<br>\n\n## Future Plans\n\nI plan to consistently record new things I learn while studying development on this blog so I don't forget them. And later, if someone asks me \"How did you study?\", I'll be proud to show them this blog.\n\nI'll do my best to post regularly! üòä\n"},{"excerpt":"üßê Why Do we have to study sorting algorithm? Sorting algorithms are a fundamental topic that every developer should study at least once. It's one of the most common and essential concepts in programm‚Ä¶","fields":{"slug":"/starting-sorting-algorithm/"},"frontmatter":{"date":"December 04, 2024","title":"üóÇÔ∏è Sorting Algorithm","tags":["Algorithm"]},"rawMarkdownBody":"\n![Sorting Algorithm Image Caption](sort-algorithm-image.png)\n\n<br>\n\n## üßê Why Do we have to study sorting algorithm?\n\n**Sorting algorithms** are a fundamental topic that every developer should study at least once. It's one of the most common and essential concepts in programming. But Sometimes we overlook the importance of sorting algorithms because we work with them so frequently.  \nHowever, we should look at this from a different perspective - the fact that it's such a common topic actually highlights how important it is.\n\nBut When you study sort algorithm at first time, You can feel like\n\n> \"Sorting? Isn't it just arranging data in order? Is it really that important?\"\n\nSorting might seem simple at first glance. The main point is correct - all we need to do is **arrange data in order**\n\n<br>\n\n## ‚ùì The real question is `\"How?\"`\n\n![How Image Caption](how-image.jpg)\n\nThe key question is **\"How\"** when it comes to `Sorting Algorithm`.\nSorting algorithm are diverse, and the choice of which algorithm to use can make a world of difference in the results. A sorting task that could be completed in one second might take 10 minutes, while a problem that seems to require 10 minutes could be solved in just one second.\n\nFor example, imagine we have N students in a class and we need to arrange them in order based on their test scores. In a basic approach, we can randomly select one student and compare their score with another student's score. When we find a student with a lower score, we continue comparing that student's score with others. We repeat this process N-1 times. Through this method, we can identify the student with the lowest score and place them at the front of the line.\n\nAfter that, we simply repeat the same process with the remaining N-1 students.\nSo, how many comparisons do we need to make to arrange all students in order?\n\n### N-1 + N-2 + ‚Ä¶ + 3 + 2 + 1 = N(N-1)/2\n\nWe need N(N-1)/2 comparisons to arrange them correctly.\nLet's imagine each comparison takes one second and we have 10 students.\nThat means 10 \\* 9 / 2 = 45. We can arrange them in 45 seconds.\nHowever, if we have 100 students, it would take 1.375 hours.\nAnd if we have 1000 students, it would take 138.75 hours.\nAs the number of students increases, the number of required comparison operations grows **exponentially**\n\n<br>\n\n## üö®¬†The importance of sorting algorithm\n\nFrom the previous example, we can see that the number of required comparison operations grows exponentially as the amount of data increases.So how do services like YouTube and TikTok, which have massive amounts of data that need to be sorted, handle this?\n\nDo they rely on supercomputers with extraordinary computing power?\nThis wouldn't make sense financially, and it's not a fundamental solution either.\nFor example, you wouldn't use a supercomputer just to run a service with only 1000 users.\n\n<br>\n\n## ‚≠ê The soloution lies in the sorting algorithm\n\n![](man-idea.png)\n\nWe can solve the problem of exponentially increasing comparison operations by changing our sorting method.\nThe previous sorting method has a time complexity of **O(n^2)**.\nThis notation is called **Big O Notation**, which I'll explain in a later post. For now, you can roughly think of it as how the processing time increases based on the input size N.\n\nHowever, if we change our sorting algorithm, we can solve it with a time complexity of **O(n log n)**.\nFor example, if we use the **merge sorting algorithm**, which has a time complexity of O(n log n), arranging 1000 students would only take 2.77 hours.\nThis is a dramatic decrease compared to the previous method which took 138.75 hours.\nIn reality, each comparison would take much less than one second, so the actual time would be just a matter of seconds.\n\n<br>\n\n## ü§®¬†But why do I still need to study this?\n\n![](think_person.jpg)\n\nCan't We just use the well-designed sorting libraries created by brilliant developers?  \nYes, we can. In fact, we don't need to implement sorting algorithms from scratch.\nIn most situations, it's more efficient **to use well-designed tools** created by others.  \nSo why do we need to study sorting algorithms? The answer lies in learning different approaches to solve computational problems from various perspectives.\n\nSorting algorithms are all about finding more efficient ways to solve problems\n\nFrom studying sorting algorithms, we can learn following problem-solving strategies:\n\n- **Divide the problem into smaller parts** : Break the problem into manageable pieces and solve it stepby step (e.g. the Divide and Conquer approach in Merge Sort)\n- **Leverage randomness** : Use randomness to approach the problem or optimize performance (e.g. the random pivot selection of Quick Sort)\n- **Utilize specialized data structures** : Choose or implement data structure that best suit the problem. (e.g. the hepa structure used in Heap Sort).\n\nAdditionally, we can learn how to measure and evaluate algorithm performance.\nThis is a crucial perspective when dealing with large-scale computational problems.\n\n- Using **Big O Notation** to analyze time and space complexity of algorithms\n- Selecting appropriate algorithms by considering both **average and worst-case scenarios**\n- Understanding **Trade-offs** : Balancing memory usage and operational speed\n\n<br>\n\n## üéà¬†Conclusion\n\nThe reason we study sorting algorithms is not merely to implement code.  \nThrough them, we develop **computational thinking**, learn efficient problem-solveing techniques, and gain practical intuition for software design.  \nSorting algorithms serve as an excellent tool for practicing diverse problem-solving stragegies and critical thinking skills.  \n**In the end, studying sorting algorithms is about building the foundational strength needed to grow as a software engineer! üí™**\n"}]}},"pageContext":{}},"staticQueryHashes":[],"slicesMap":{}}